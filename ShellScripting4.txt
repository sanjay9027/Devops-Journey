Shell Scripting-4
------------------------
Cron -- to automate a scheduled tasks

crontab--files created for cron
get overview of crontab
----------------------------
ubuntu@ip-172-31-32-184:~$ cat /etc/crontab

# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name command to be executed
17 *    * * *   root    cd / && run-parts --report /etc/cron.hourly
25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )
47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )
52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )
#
ubuntu@ip-172-31-32-184:~$
-------------------------------------------
in crontab, * means every time 
* minutes- cron will run every minute
*month- cron will run every month
sun day--cron will run every sunday
------------------------------------------

ubuntu@ip-172-31-32-184:~$ crontab -l  //to see all active crontabs 
no crontab for ubuntu
ubuntu@ip-172-31-32-184:~$
----------------------------------------------

ubuntu@ip-172-31-32-184:~$ crontab -e  //to edit crontab
for the first time it will ask to choose editor i.e nano or vim etc
----------------------------------------------------
Cron job will run & create a file
---------------------------------------

ubuntu@ip-172-31-32-184:~$ crontab -e

//inside crontab insert below commands to create test_cron.txt file when cron run
51 8 * * * echo "hello world" > /home/ubuntu/test_cron.txt

//check whether cron file created ?
ubuntu@ip-172-31-32-184:~$ ls   
adding_user.sh  bolo  hello             new      test_cron.txt
backups         dir1  iterate_files.sh  scripts

-----------------------------------------------------------
to check diskspace >15 % & return output with evaluate time
-----------------------------------------------------------
ubuntu@ip-172-31-32-184:~/scripts$ cat check_disk.sh
#!/bin/bash
alert=15
evaluated_date=$(date +'%m/%d/%Y %H:%M:%S')
df -H | awk '{print $5 " " $1}' | while read output;
do
        #echo "Disk Detail: $output"
        usage=$(echo $output | awk '{print $1}' | cut -d'%' -f1)
        file_sys=$(echo $output | awk '{print $2}')
        #echo $usage
        if [[ $usage -ge alert ]]
        then
                echo "CRITICAL  $file_sys  usage is $usage evaluated on $evaluated_date"
        fi

done

ubuntu@ip-172-31-32-184:~/scripts$ ./check_disk.sh
CRITICAL  /dev/root  usage is 24 evaluated on 12/26/2022 10:37:39
ubuntu@ip-172-31-32-184:~/scripts$
----------------------------------------------------------------------
to make a cron of above scripts
ubuntu@ip-172-31-32-184:~/scripts$ crontab -e
* * * * * bash /home/ubuntu/scripts/check_disk.sh >> /home/ubuntu/check_disk_logs.txt

>> means it will overide file
ubuntu@ip-172-31-32-184:~$ cat check_disk_logs.txt
CRITICAL  /dev/root  usage is 24 evaluated on 12/26/2022 10:43:01
CRITICAL  /dev/root  usage is 24 evaluated on 12/26/2022 10:44:01
CRITICAL  /dev/root  usage is 24 evaluated on 12/26/2022 10:45:01
ubuntu@ip-172-31-32-184:~$

-----------------------------------------------------------------------
